#!/usr/bin/env ruby

require 'batali'

Bogo::Cli::Setup.define do

  on :v, :version, 'Print version' do
    puts "batali - Cookbook Collection Manager - [Version: #{Batali::VERSION}]"
    puts "  - #{Batali::TAG_LINES.sample}"
    exit
  end

  global_opts = lambda do
    on :c, :config=, 'Configuration file path'
    on :V, :verbose, 'Enable verbose output'
    on :D, :debug, 'Enable debug mode'
    on :f, :file=, 'Path to Batali file'
    on :y, :yes, 'Answer yes to interactive prompts'
  end

  command 'display' do
    description 'Display manifest information'
    self.instance_exec(&global_opts)
    run do |opts, args|
      Batali::Command::Display.new({:display => opts.to_hash}, args).execute!
    end
  end

  command 'install' do
    description 'Install cookbooks from manifest'
    self.instance_exec(&global_opts)
    on :d, 'dry-run', 'Print changes'
    on :p, 'path=', 'Cookbook install path'
    on :I, 'infrastructure', 'Resolve infrastructure cookbooks'
    run do |opts, args|
      Batali::Command::Install.new({:install => opts.to_hash}, args).execute!
    end
  end

  command 'update' do
    description 'Update cookbooks manifest'
    self.instance_exec(&global_opts)
    on :d, 'dry-run', 'Print changes'
    on :l, 'least-impact', 'Update cookbooks with minimal version impact', :default => true
    on :i, 'install', 'Install cookbooks after update', :default => true
    on :p, 'path=', 'Cookbook install path'
    on :I, 'infrastructure', 'Resolve infrastructure cookbooks'
    on :e, 'environment=', 'Restrict auto-discovery to named environment'

    run do |opts, args|
      Batali::Command::Update.new({:update => opts.to_hash}, args).execute!
    end
  end

  command 'resolve' do
    description 'Build the cookbook manifest'
    self.instance_exec(&global_opts)
    on :d, 'dry-run', 'Print changes'
    on :l, 'least-impact', 'Update cookbooks with minimal version impact', :default => true
    on :I, 'infrastructure', 'Resolve infrastructure cookbooks'
    on :e, 'environment=', 'Restrict auto-discovery to named environment'

    run do |opts, args|
      Batali::Command::Resolve.new({:resolve => opts.to_hash}, args).execute!
    end
  end

  command 'cache' do
    description 'Local cache management and information'
    self.instance_exec(&global_opts)
    on :s, 'scrub', 'Delete local cache contents'
    run do |opts, args|
      Batali::Command::Cache.new({:cache => opts.to_hash}, args).execute!
    end
  end

  command 'configure' do
    self.instance_exec(&global_opts)
    run do |opts, args|
      Batali::Command::Configure.new(opts, args).execute!
    end
  end

  command 'supermarket' do
    description 'Generate a supermarket'
    self.instance_exec(&global_opts)
    on :p, 'path=', 'Cookbook install path'
    on :I, 'infrastructure', 'Resolve infrastructure cookbooks'
    on :s, 'skip-install', 'Skip cookbook installation'
    on :S, 'supermarket-path=', 'Supermarket output directory', :default => 'supermarket'
    on :A, 'assets-path=', 'Supermarket assets storage path', :default => File.join('supermarket', 'assets')
    on :R, 'remote-supermarket-url=', 'Custom remote supermarket URL (https://myhost.com:443/supermarket)', :default => 'http://localhost'
    on :D, 'download-prefix=', 'Remote location prefixed to asset name', :default => '/assets'
    on :T, 'location-type=', 'Name of location type', :default => 'batali'
    on :P, 'pretty-universe', 'Output formatted universe JSON'
    on :U, 'universe-only', 'Only generate the supermarket universe.json file'
    on :C, 'clean-assets', 'Replace any existing compressed assets'

    run do |opts, args|
      Batali::Command::Supermarket.new(opts, args).execute!
    end
  end

end
